{"path":"_FileOrganizer2000/Media/Brinkmann_Problem.pdf","text":"Brinkmann Problem Haochen Huang December 20, 2024 1 Tests Have Been Done The problem has been confirmed not to associate with: initial condition, V-cycle, boundary condition, time step etc. In short it is a math problem instead of the technical issue. 2 Description of the Real Problem The multigrid solver in general follows process decribed by figure1. Given the u k the residual Rk (the upper subscript indicates the iterating times, default maximum is 100) is computed. Then the relaxation procedure is performed to obtain δu k which will be added to update u k+1 = u k +δu k. Note at least one relaxation is preformed even if the initial value directly meet the residual tolerance. You may find detailed description and step by step equation in [1]. Now consider a cell where fs = 1 i.e. the solid cell with a given initial velocity u = cUt where c is an arbitrary constant vector and Ut is the imposed solid velocity. To simplify the problem, let’s assume the imposed velocity only exists on x direction in the 2D case. With Brinkmann Penalization, the scheme to compute R k and δu k on this solid cell now read: R k = − δt η (c − 1)Ut + O1 (1) δu k = ∆2 δt η Ut + ∆2R k + O2 ∆2 δt η + O3 (2) where Oi is the term in the original equation, η is a penalization coefficient, δt the time step and ∆ the grid length. Once the η is vanishingly small e.g. η = 10 −10, the Oi terms in both function become trivial, and the δu k now reads δu k ≈ ∆2 δt η Ut + ∆2R k ∆2 δt η ≈ (2 − c)Ut (3) This indicates a fact: no matter the initial value, it takes single iteration to make u 1 = u 0 + δu 0 = cUt + (2 − c)Ut = 2Ut and the uk will never change again since the δu k ≡ 0. 3 Resolution The simplest way is to alter equation 4 into δu k = ∆2Rk + O2 ∆2 δt η + O3 (4) It is also recommended to alter the selection of the maximum residual which serves as threshold to break the iteration since for solid cell, since any variation in u k will multiple δt η , a quite large number. 1 mg solve mg cycle relax residual I II III xk , RESk , n(3) xk+1(4) xk , y (1) RESk (2) x0 , y input RESk < ϵ? k <NITERMAX? return output Figure 1: Figure from [1]. 2 References [1] Haochen Huang. Basilisk documentation: Poisson.h documentation. https://github.com/ Langford-H/Basilisk-Documentation, 2024. 3","libVersion":"0.3.2","langs":""}